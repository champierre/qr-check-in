{"files":[{"id":"6bab3743-3f00-461e-916d-d2de5598f39d","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"Asia/Tokyo\",\n  \"dependencies\": {},\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\",\n  \"webapp\": {\n    \"executeAs\": \"USER_DEPLOYING\",\n    \"access\": \"ANYONE_ANONYMOUS\"\n  }\n}"},{"id":"22826ea9-1e0a-4d69-b915-ce1545598e79","name":"コード","type":"server_js","source":"const activeSpreadSheet \u003d SpreadsheetApp.getActiveSpreadsheet();\n\nfunction doGet(e) {\n  const reqParam \u003d e.parameter;//パラメーターを取得\n  switch (reqParam.action) {//actionパラメーターの内容によって処理を分岐\n    case \"find\": // return member data\n      {\n        const memberId \u003d reqParam.id;\n        const data \u003d getMemberData(memberId);\n        return ContentService.createTextOutput(JSON.stringify(data)).setMimeType(ContentService.MimeType.JSON);\n      }\n      break;\n    default:\n      {\n        const result \u003d \u0027did nothing\u0027;\n        return ContentService.createTextOutput(JSON.stringify(result)).setMimeType(ContentService.MimeType.JSON);\n      }\n      break;\n  }\n}\n\n// デバッグ用の関数\nfunction doGetTest() {\n  //eの作成\n  var e \u003d {};\n  e.parameter \u003d {\n    action : \u0027find\u0027,\n    id: \u00273d6v\u0027,\n  };\n  //呼び出す。\n  doGet(e);\n}\n\nconst nameColumn \u003d 1; // A\n// B\n// C\nconst cardTypeColumn \u003d 4; // D\nconst cardURLColumn \u003d 5; // E\nconst idColumn \u003d 6; // F\nconst registerDateColumn \u003d 7; // G\n\nfunction getMemberData(memberId) {\n  const dataSheet \u003d activeSpreadSheet.getSheetByName(\u0027Data\u0027);\n  const data \u003d dataSheet.getDataRange().getValues();\n  for (let i \u003d 0; i \u003c data.length; i++) {\n    if (data[i][idColumn - 1] \u003d\u003d memberId) {\n      return data[i];\n    }\n  }\n  return null;\n}\n\nfunction testGetMemeberData() {\n  console.log(getMemberData(\u00273d6v\u0027));\n}\n\nfunction onOpen() {\n  const ui \u003d SpreadsheetApp.getUi();\n  const menu \u003d ui.createMenu(\u0027Membership\u0027);\n  menu.addItem(\u0027Create Cards\u0027, \u0027fillEmptyCardUrl\u0027)\n  menu.addItem(\u0027Fill empty ID\u0027, \u0027fillEmptyMemberId\u0027)\n  menu.addToUi();\n}\n\nfunction fillSlide(slide, id, qrURL, name) {\n  slide.getPageElements().forEach(elm \u003d\u003e {\n    // Logger.log(elm.getPageElementType());\n    // Logger.log(elm.getTitle());\n    if (elm.getTitle() \u003d\u003d\u003d \u0027QR\u0027) {\n      if (elm.getPageElementType() \u003d\u003d\u003d SlidesApp.PageElementType.IMAGE) {\n        elm.asImage().replace(qrURL);\n      }\n      if (elm.getPageElementType() \u003d\u003d\u003d SlidesApp.PageElementType.SHAPE) {\n        elm.asShape().replaceWithImage(qrURL);\n      }\n    }\n    if (elm.getPageElementType() \u003d\u003d\u003d SlidesApp.PageElementType.SHAPE) {\n      elm.asShape().getText().replaceAllText(\u0027{{id}}\u0027, id);\n      elm.asShape().getText().replaceAllText(\u0027{{name}}\u0027, name);\n    }\n  })\n}\n\nfunction fillCardData(card, id, qrURL, name) {\n  const slides \u003d card.getSlides();\n  slides.forEach(sld \u003d\u003e {\n    fillSlide(sld, id, qrURL, name);\n  });\n}\n\nfunction updateCardsByRange(range) {\n  const dataSheet \u003d activeSpreadSheet.getSheetByName(\u0027Data\u0027);\n  const startRow \u003d range.getRow();\n  const startColumn \u003d 1;\n  const numRows \u003d range.getNumRows();\n  const cardDataRows \u003d dataSheet.getRange(startRow, startColumn, numRows, dataSheet.getLastColumn()).getValues();\n\n  const workFolder \u003d DriveApp.getFileById(activeSpreadSheet.getId()).getParents().next();\n  const cardFolder \u003d workFolder.getFoldersByName(\u0027member-cards\u0027).next();\n\n  for (var i \u003d 0; i \u003c cardDataRows.length; i++) {\n    var row \u003d cardDataRows[i];\n    if (row[cardURLColumn - 1] !\u003d \u0027\u0027) {\n      console.log(`Skip for non empty card URL on row: ${startRow + i}`);\n      continue;\n    }\n    let id \u003d row[idColumn - 1];\n    const name \u003d row[nameColumn - 1];\n    if (name \u003d\u003d \u0027\u0027) {\n      console.log(`Skip for no name on row: ${startRow + i}`);\n      continue;\n    }\n    if (id \u003d\u003d \u0027\u0027) {\n      const newId \u003d generateMemberId();\n      dataSheet.getRange(startRow + i, idColumn).setValue(newId);\n      dataSheet.getRange(startRow + i, registerDateColumn).setValue(Utilities.formatDate(new Date(), \u0027JST\u0027, \u0027yyyy/MM/dd\u0027));\n      id \u003d newId;\n      console.log(`Generate ID \"${newId}\" on row: ${startRow + i}`);\n    }\n    const qrURL \u003d \u0027http://chart.apis.google.com/chart?chs\u003d200x200\u0026cht\u003dqr\u0026chl\u003d\u0027 + id;\n    const cardName \u003d `${id}`;\n    // clean up the previous cards\n    const oldCards \u003d DriveApp.getFilesByName(cardName);\n    while (oldCards.hasNext()) {\n      oldCards.next().setTrashed(true);\n    }\n    // create the new card\n    let cardType \u003d row[cardTypeColumn - 1];\n    if (cardType \u003d\u003d\u003d \u0027\u0027) cardType \u003d \u0027default\u0027;\n    const cardTemplate \u003d workFolder.getFilesByName(`card-template-${cardType}`).next();\n    const cardFile \u003d cardTemplate.makeCopy(cardName, cardFolder);\n    const card \u003d SlidesApp.openById(cardFile.getId());\n    fillCardData(card, id, qrURL, name);\n    const cardURL \u003d cardFile.getUrl();\n    dataSheet.getRange(startRow + i, cardURLColumn).setValue(cardURL);\n    Logger.log(`update card: ${id} for ${name}`);\n  }\n}\n\nfunction updateCardsBySelection() {\n  const dataSheet \u003d activeSpreadSheet.getActiveSheet();\n  const ranges \u003d dataSheet.getSelection().getActiveRangeList().getRanges();\n  ranges.forEach(range \u003d\u003e {\n    updateCardsByRange(range);\n  });\n}\n\nfunction testSelection() {\n  var activeSheet \u003d SpreadsheetApp.getActiveSheet();\n  var rangeList \u003d activeSheet.getRangeList([\u0027A1:B4\u0027, \u0027D1:E4\u0027]);\n  rangeList.activate();\n\n  var selection \u003d activeSheet.getSelection();\n  // Current Cell: D1\n  console.log(\u0027Current Cell: \u0027 + selection.getCurrentCell().getA1Notation());\n  // Active Range: D1:E4\n  console.log(\u0027Active Range: \u0027 + selection.getActiveRange().getA1Notation());\n  // Active Ranges: A1:B4, D1:E4\n  var ranges \u003d selection.getActiveRangeList().getRanges();\n  for (var i \u003d 0; i \u003c ranges.length; i++) {\n    console.log(\u0027Active Ranges: \u0027 + ranges[i].getA1Notation());\n  }\n  console.log(\u0027Active Sheet: \u0027 + selection.getActiveSheet().getName());\n}\n\nfunction fillEmptyCardUrl() {\n  const dataSheet \u003d activeSpreadSheet.getSheetByName(\u0027Data\u0027);\n  const dataRange \u003d dataSheet.getDataRange();\n  updateCardsByRange(dataRange);\n}\n\n/**\n * Generate ID\n */\nfunction generateMemberId() {\n  const characters \u003d \"abcdefghijklmnopqrstuvwxyz\";\n  let memberId \u003d `${(new Date()).getFullYear() - 2020}`;\n  while (true) {\n    memberId +\u003d characters.charAt(Math.floor(Math.random() * characters.length));\n    memberId +\u003d Math.floor(Math.random() * 10);\n    memberId +\u003d characters.charAt(Math.floor(Math.random() * characters.length));\n    if (!getMemberData(memberId)) {\n      break;\n    }\n  }\n  return memberId;\n}\n\nfunction testGenerateMemberId() {\n  console.log(generateMemberId());\n}\n\nfunction fillEmptyMemberId() {\n  const dataSheet \u003d activeSpreadSheet.getSheetByName(\u0027Data\u0027);\n  const firstRow \u003d 2;\n  const lastRow \u003d dataSheet.getLastRow();\n  for (let i \u003d firstRow; i \u003c\u003d lastRow; i++) {\n    let cell \u003d dataSheet.getRange(i, idColumn);\n    if (cell.isBlank()) {\n      const newId \u003d generateMemberId();\n      cell.setValue(newId);\n      console.log(newId);\n    }\n  }\n}\n"}]}